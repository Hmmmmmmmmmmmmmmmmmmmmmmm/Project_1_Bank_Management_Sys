before u generate it let me give the code so u can review it first and then make it:
package bank.management.system;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Login extends JFrame implements ActionListener {
    //4:3 ratio kept
    private final int widthWindow = 640;
    private final int heightWindow = 480;
//    JLabel welcomeLabel, label2, label3;
//    private Image backgroundImage;
    JTextField cardNumberField;
    JPasswordField pinField;
    JButton signInButton, clearButton, signUpButton;
    public Login() {
//        backgroundImage = new ImageIcon("C:/path/to/your/image/background.jpg").getImage();
        setSize(widthWindow,heightWindow);
        setTitle("Asteroid Destroyer");

        //setting the logo at the top center
        setLayout(null);


        // Create an ImageIcon with your logo (adjust the path to the image file)
        ImageIcon logo = new ImageIcon("C:\\xtra\\Last_Chance\\BMS\\src\\icons\\bank.png");
        addImage(logo, (widthWindow - 100) / 2, 20, 100, 100); // Logo at top center

        //trial 4
        // Centered title
        addLabel("Welcome to the Bank!", "Times New Roman Bold", Font.PLAIN, 34, 0, 130, true);
        /
        cardNumberField = addLabelWithTextField2("Card Number:", "Times New Roman", Font.BOLD, 20, 70, 205, 250, 30, 220, 15);
        pinField = addLabelWithPasswordField2("PIN:", "Times New Roman", Font.BOLD, 20, 70, 245, 250, 30, 220, 15);

        //butttttoooonnnnsssss
        signInButton = addRoundedButton("Sign In", "Times New Roman", Font.BOLD, 18, 125, 300, 150, 40, false);
        signInButton.addActionListener(this);
        clearButton = addRoundedButton("Clear", "Times New Roman", Font.BOLD, 18, 300, 300, 150, 40, false);
        clearButton.addActionListener(this);
        signUpButton = addRoundedButton("Sign Up", "Times New Roman", Font.BOLD, 18, ((640 - 120) / 2)-20, 360, 120, 40, false);
        signUpButton.addActionListener(this);



        //Centering the pop-up
        //using another function to get the center of the screen
        //this uses the awt package
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int screenWidth = screenSize.width;
        int screenHeight = screenSize.height;

        //calculating the center position based on the screenWidth
        int sideToWindowSize = (screenWidth - 640) / 2;  // (screenWidth - windowWidth) / 2
        int topToWindow = (screenHeight - 480) / 2; // (screenHeight - windowHeight) / 2

        setLocation(sideToWindowSize, topToWindow);


        ImageIcon backgroundImage = new ImageIcon("C:\\xtra\\Last_Chance\\BMS\\src\\icons\\layer-170971.jpg"); // Replace with actual path
        addImage(backgroundImage,0,0, widthWindow, heightWindow);

        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent b) {
        try {
            if(b.getSource()==signInButton){

            } else if (b.getSource()==clearButton) {
                cardNumberField.setText("");
                pinField.setText("");
            }else if (b.getSource()==signUpButton){

            }

        }catch (Exception e){
            e.printStackTrace();
        }
    }

    private void addImage(ImageIcon imageIcon, int x, int y, int width, int height) {
        Image image = imageIcon.getImage();  // Get the Image from the ImageIcon
        Image scaledImage = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);  // Resize the image
        ImageIcon scaledImageIcon = new ImageIcon(scaledImage);

        JLabel imageLabel = new JLabel(scaledImageIcon); // Create JLabel to hold the image
        imageLabel.setBounds(x, y, width, height); // Set bounds for positioning
        add(imageLabel); // Add the label with the image to the window
    }


    private void addLabel(String text, String fontName, int fontStyle, int fontSize, int x, int y, boolean center) {
        JLabel label = new JLabel(text);
        label.setFont(new Font(fontName, fontStyle, fontSize));

        // Enable anti-aliasing for smoother text rendering
        label.putClientProperty(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        // Get preferred size
        Dimension size = label.getPreferredSize();

        // Add subtle padding dynamically (2-5px based on text length)
        int padding = Math.min(5, size.width / 20); // Scale padding based on text size

        // Apply an empty border for subtle spacing
        label.setBorder(BorderFactory.createEmptyBorder(0, padding, 0, padding));

        // Adjust size with subtle padding
        label.setSize(size.width + padding * 2, size.height);

        // If centering is required
        if (center) {
            x = (widthWindow - label.getWidth()) / 2;
        }

        // Set final position
        //taking extra 5 px cuz no clue why the fuck it wont take it any other way!????
        label.setBounds(x, y, label.getWidth()+5, label.getHeight());
        add(label);
    }
    private JTextField addLabelWithTextField(String labelText, String fontName, int fontStyle, int fontSize,
                                             int x, int y, int textFieldWidth, int textFieldHeight, int spacing) {
        // Create Label
        JLabel label = new JLabel(labelText);
        label.setFont(new Font(fontName, fontStyle, fontSize));

        // Calculate label size dynamically
        label.setSize(label.getPreferredSize());
        label.setBounds(x, y, label.getWidth(), label.getHeight());
        add(label);

        // Create Text Field
        JTextField textField = new JTextField();
        textField.setFont(new Font("Times New Roman", Font.BOLD, 14)); // Consistent font for text fields

        // **Calculate dynamic position** for the text field based on the label's width
        int textFieldX = x + label.getWidth() + spacing;
        textField.setBounds(textFieldX, y, textFieldWidth, textFieldHeight);
        add(textField);

        return textField; // Return text field if needed for future use
    }
    private JTextField addLabelWithTextField(String text, String fontName, int fontStyle, int fontSize,
                                             int x, int y, int textFieldWidth, int textFieldHeight,
                                             int labelWidth, int spacing) {
        // Create label
        JLabel label = new JLabel(text);
        label.setFont(new Font(fontName, fontStyle, fontSize));

        // Set a fixed width for alignment
        label.setSize(labelWidth, label.getPreferredSize().height);
        label.setBounds(x, y, labelWidth, label.getHeight());

        add(label);

        // Position the text field dynamically based on the label
        JTextField textField = new JTextField();
        textField.setFont(new Font(fontName, Font.BOLD, 14));  // Applying font for consistency
        textField.setBounds(x + labelWidth + spacing, y, textFieldWidth, textFieldHeight);

        add(textField);

        return textField; // Return if needed
    }

    private JTextField addLabelWithTextField2(String text, String fontName, int fontStyle, int fontSize,
                                             int x, int y, int textFieldWidth, int textFieldHeight,
                                             int labelWidth, int spacing) {
        // Create label
        JLabel label = new JLabel(text);
        label.setFont(new Font(fontName, fontStyle, fontSize));
        label.setForeground(Color.WHITE);
        label.setSize(labelWidth, label.getPreferredSize().height);
        label.setBounds(x, y, labelWidth, label.getHeight());
        add(label);

        // Create text field
        JTextField textField = new JTextField();
        textField.setFont(new Font(fontName, Font.BOLD, 16));  // Increased size for better visibility
        textField.setBounds(x + labelWidth + spacing, y, textFieldWidth, textFieldHeight);


        makeRoundedTextField(textField, textFieldWidth, textFieldHeight, 20);
        add(textField);
        return textField;
    }

    private JPasswordField addLabelWithPasswordField2(String text, String fontName, int fontStyle, int fontSize,
                                              int x, int y, int textFieldWidth, int textFieldHeight,
                                              int labelWidth, int spacing) {
        // Create label
        JLabel label = new JLabel(text);
        label.setFont(new Font(fontName, fontStyle, fontSize));
        label.setForeground(Color.WHITE);
        label.setSize(labelWidth, label.getPreferredSize().height);
        label.setBounds(x, y, labelWidth, label.getHeight());
        add(label);

        // Create text field
        JPasswordField passwordField = new JPasswordField();
        passwordField.setFont(new Font(fontName, Font.BOLD, 16));  // Increased size for better visibility
        passwordField.setBounds(x + labelWidth + spacing, y, textFieldWidth, textFieldHeight);


        makeRoundedTextField(passwordField, textFieldWidth, textFieldHeight, 20);

        add(passwordField);
        return passwordField;
    }


    private JButton addRoundedButton(String text, String fontName, int fontStyle, int fontSize,
                                     int x, int y, int width, int height, boolean opaque) {
        JButton button = new JButton(text);
        button.setFont(new Font(fontName, fontStyle, fontSize));
        button.setBounds(x, y, width, height);

        // Define colors
        Color normalColor = new Color(50, 150, 250);
        Color hoverColor = new Color(30, 130, 230);
        Color clickColor = new Color(20, 100, 200);

        // Set transparency properly
        if (!opaque) {
            button.setOpaque(false);
            button.setContentAreaFilled(false);
        } else {
            button.setOpaque(true);
            button.setContentAreaFilled(true);
            button.setBackground(normalColor);
        }

        // Set the rounded border
        button.setBorder(new RoundedBorder(20, Color.DARK_GRAY));

        //remove the fucking annoying lil white box
        button.setFocusPainted(false);

        // Hover & Click Effect
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBorder(new RoundedBorder(20, hoverColor)); // Change border color
                button.setForeground(Color.WHITE); // Ensure text is visible
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBorder(new RoundedBorder(20, Color.DARK_GRAY)); // Revert border color
            }
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                button.setBorder(new RoundedBorder(20, clickColor)); // Darker border on click

                if (opaque) {
                    button.setBackground(clickColor); // Change background only if opaque
                } else {
                    button.setForeground(new Color(200, 200, 200)); // Dim text for transparent button
                }

                // 🔥 **Temporary overlay effect for a click**
                button.setOpaque(true);
                button.repaint();
            }

            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                if (button.getBounds().contains(evt.getPoint())) {
                    button.setBorder(new RoundedBorder(20, hoverColor)); // Return to hover color

                    if (opaque) {
                        button.setBackground(hoverColor); // Keep hover color if opaque
                    } else {
                        button.setForeground(Color.WHITE); // Reset text for transparent button
                    }
                } else {
                    button.setBorder(new RoundedBorder(20, Color.DARK_GRAY)); // Reset border

                    if (opaque) {
                        button.setBackground(normalColor); // Reset background
                    } else {
                        button.setForeground(Color.WHITE); // Reset text color
                    }
                }

                // 🔥 **Restore transparency if needed**
                if (!opaque) {
                    button.setOpaque(false);
                }

                button.repaint();
            }

        });

        button.setForeground(Color.WHITE); // Text color
        add(button);
        return button;
    }

    private void makeRoundedTextField(JComponent textField, int width, int height, int arc) {
        textField.setPreferredSize(new Dimension(width, height));
        textField.setOpaque(false); // Ensure it's interactive
        textField.setBackground(Color.WHITE);

        // Apply the fixed rounded border
        textField.setBorder(BorderFactory.createCompoundBorder(
                new RoundedBorder(arc,Color.DARK_GRAY),
                BorderFactory.createEmptyBorder(5, 10, 5, 10) // Padding
        ));

        textField.setFocusable(true); // Ensure the field can be focused


}

    public static void main(String[] args) {
        Login login = new Login();

    }
}
class RoundedBorder implements Border {
    private final int radius;
    private final Color color;

    public RoundedBorder(int radius, Color color) {
        this.radius = radius;
        this.color = color;
    }

    @Override
    public Insets getBorderInsets(Component c) {
        // Reduced insets to avoid shrinking the clickable area
        return new Insets(4, 4, 4, 4);
    }

    @Override
    public boolean isBorderOpaque() {
        return false; // Ensure proper painting of the field
    }

    @Override
    public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setColor(color);

        // Adjusting the rectangle to avoid cutting the top part
        g2.drawRoundRect(x+1, y+1, width - 2, height - 2, radius, radius);
    }
}